/**
 * Smart Manager APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { boolean, object, optional, Schema, string } from '../schema';
import {
  DeviceCategoryEnum,
  deviceCategoryEnumSchema,
} from './deviceCategoryEnum';
import {
  PeripheralClassesEnum,
  peripheralClassesEnumSchema,
} from './peripheralClassesEnum';

export interface WiredDeviceTemplate {
  /** Unique (within template) device identifier */
  id: string;
  /** Human-friendly label for the device */
  label: string;
  /** Refers to the class within the code that represents a device */
  className: PeripheralClassesEnum;
  /**
   * We categorise devices mainly to automate commissioning of "wired"
   * and "multisenseNetwork"s (e.g. create those peripherals
   * without engineers having to manually link them on the native app)
   */
  deviceCategory: DeviceCategoryEnum;
  /** The port/slot on the IO board that the device is wired to */
  port: string;
  /**
   * Whether the contact pair on a wired device is closed when it, or the device operating it, is in a de-energised state.
   * Only applicable to 'relay' devices and not needed for 'input' devices
   */
  normallyClosed?: boolean;
}

export const wiredDeviceTemplateSchema: Schema<WiredDeviceTemplate> = object({
  id: ['id', string()],
  label: ['label', string()],
  className: ['className', peripheralClassesEnumSchema],
  deviceCategory: ['deviceCategory', deviceCategoryEnumSchema],
  port: ['port', string()],
  normallyClosed: ['normallyClosed', optional(boolean())],
});
