/**
 * Smart Manager APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { AccessPoint, accessPointSchema } from '../models/accessPoint';
import {
  CreateWifiConnection,
  createWifiConnectionSchema,
} from '../models/createWifiConnection';
import {
  CreateWifiConnectionResponse,
  createWifiConnectionResponseSchema,
} from '../models/createWifiConnectionResponse';
import {
  DeleteWifiConnection,
  deleteWifiConnectionSchema,
} from '../models/deleteWifiConnection';
import { NetworkInfo, networkInfoSchema } from '../models/networkInfo';
import { array } from '../schema';
import { BaseController } from './baseController';

export class NetworkController extends BaseController {
  /**
   * Get the Smart Manager network info
   *
   * @return Response from the API call
   */
  async getNetworkInfo(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NetworkInfo>> {
    const req = this.createRequest('GET', '/network');
    req.authenticate(false);
    return req.callAsJson(networkInfoSchema, requestOptions);
  }

  /**
   * Get a list of access points (i.e. wifi networks) that are visible to this Smart Manager
   *
   * @return Response from the API call
   */
  async getAccessPoints(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AccessPoint[]>> {
    const req = this.createRequest('GET', '/network/access-points');
    req.authenticate(false);
    return req.callAsJson(array(accessPointSchema), requestOptions);
  }

  /**
   * Add an access point connection, and consequently connect to it
   *
   * If a network is known (i.e. smart-manager has previously connected to it),
   * you can omit `passphrase` even if it's a private network
   *
   * @param body
   * @return Response from the API call
   */
  async createWifiConnection(
    body: CreateWifiConnection,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CreateWifiConnectionResponse>> {
    const req = this.createRequest('POST', '/network/access-points/connection');
    const mapped = req.prepareArgs({
      body: [body, createWifiConnectionSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.authenticate(false);
    return req.callAsJson(createWifiConnectionResponseSchema, requestOptions);
  }

  /**
   * Delete an access point connection, and consequently disconnect from it (if we're currently connected
   * to it)
   *
   * @param body
   * @return Response from the API call
   */
  async deleteWifiConnection(
    body: DeleteWifiConnection,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'DELETE',
      '/network/access-points/connection'
    );
    const mapped = req.prepareArgs({
      body: [body, deleteWifiConnectionSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.authenticate(false);
    return req.call(requestOptions);
  }

  /**
   * Disconnect from currently connected wifi network (if any)
   *
   * @return Response from the API call
   */
  async disconnectWifiConnection(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/network/access-points/disconnect');
    req.authenticate(false);
    return req.call(requestOptions);
  }
}
