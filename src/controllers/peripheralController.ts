/**
 * Smart Manager APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Peripherals404Error } from '../errors/peripherals404Error';
import { ValidateErrorJSONError } from '../errors/validateErrorJSONError';
import {
  EnoceanDimmableLightInstructionsEnum,
  enoceanDimmableLightInstructionsEnumSchema,
} from '../models/enoceanDimmableLightInstructionsEnum';
import {
  PeripheralsPointsRequest,
  peripheralsPointsRequestSchema,
} from '../models/peripheralsPointsRequest';
import {
  PeripheralWithPoints,
  peripheralWithPointsSchema,
} from '../models/peripheralWithPoints';
import {
  UpdatePeripheral,
  updatePeripheralSchema,
} from '../models/updatePeripheral';
import { array, number, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class PeripheralController extends BaseController {
  /**
   * Send EnoceanDimmableLight instructions for testing/commissioning.
   *
   * @param gatewayId
   * @param instruction
   * @return Response from the API call
   */
  async sendDimmableLightInstruction(
    gatewayId: number,
    instruction: EnoceanDimmableLightInstructionsEnum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      gatewayId: [gatewayId, number()],
      instruction: [instruction, enoceanDimmableLightInstructionsEnumSchema],
    });
    req.appendTemplatePath`/enocean/dimmablelight/${mapped.gatewayId}/instructions/${mapped.instruction}`;
    req.authenticate(false);
    return req.call(requestOptions);
  }

  /**
   * Get all peripherals on this smart manager
   *
   * @return Response from the API call
   */
  async getPeripherals(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PeripheralWithPoints[]>> {
    const req = this.createRequest('GET', '/peripherals');
    req.authenticate(false);
    return req.callAsJson(array(peripheralWithPointsSchema), requestOptions);
  }

  /**
   * Create Peripheral
   *
   * @param body
   * @return Response from the API call
   */
  async createPeripheral(
    body: unknown,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PeripheralWithPoints>> {
    const req = this.createRequest('POST', '/peripherals');
    const mapped = req.prepareArgs({ body: [body, unknown()] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(422, ValidateErrorJSONError, 'Validation Failed');
    req.authenticate(false);
    return req.callAsJson(peripheralWithPointsSchema, requestOptions);
  }

  /**
   * Get Single Peripheral
   *
   * @param id
   * @return Response from the API call
   */
  async getPeripheral(
    id: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PeripheralWithPoints>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, number()] });
    req.appendTemplatePath`/peripherals/${mapped.id}`;
    req.throwOn(404, Peripherals404Error, 'Not Found');
    req.authenticate(false);
    return req.callAsJson(peripheralWithPointsSchema, requestOptions);
  }

  /**
   * Update Peripheral
   *
   * @param id
   * @param body
   * @return Response from the API call
   */
  async updatePeripheral(
    id: number,
    body: UpdatePeripheral,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PeripheralWithPoints>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      id: [id, number()],
      body: [body, updatePeripheralSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/peripherals/${mapped.id}`;
    req.throwOn(404, Peripherals404Error, 'Not Found');
    req.throwOn(422, ValidateErrorJSONError, 'Validation Failed');
    req.authenticate(false);
    return req.callAsJson(peripheralWithPointsSchema, requestOptions);
  }

  /**
   * Delete Peripheral
   *
   * @param id
   * @return Response from the API call
   */
  async deletePeripheral(
    id: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ id: [id, number()] });
    req.appendTemplatePath`/peripherals/${mapped.id}`;
    req.throwOn(404, Peripherals404Error, 'Not Found');
    req.authenticate(false);
    return req.call(requestOptions);
  }

  /**
   * Create point data
   *
   * @param id
   * @param pointName
   * @param body
   * @return Response from the API call
   */
  async setPointValue(
    id: number,
    pointName: string,
    body: PeripheralsPointsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      id: [id, number()],
      pointName: [pointName, string()],
      body: [body, peripheralsPointsRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/peripherals/${mapped.id}/points/${mapped.pointName}`;
    req.authenticate(false);
    return req.call(requestOptions);
  }
}
