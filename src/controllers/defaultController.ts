/**
 * Smart Manager APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { DaliScan400Error } from '../errors/daliScan400Error';
import { DaliScan503Error } from '../errors/daliScan503Error';
import { Peripherals404Error } from '../errors/peripherals404Error';
import { ValidateErrorJSONError } from '../errors/validateErrorJSONError';
import { AccessPoint, accessPointSchema } from '../models/accessPoint';
import {
  CaptureLogsBody,
  captureLogsBodySchema,
} from '../models/captureLogsBody';
import {
  CaptureLogsStatus,
  captureLogsStatusSchema,
} from '../models/captureLogsStatus';
import {
  CreatePeripheral,
  createPeripheralSchema,
} from '../models/createPeripheral';
import { CreateTemplate, createTemplateSchema } from '../models/createTemplate';
import {
  CreateWifiConnection,
  createWifiConnectionSchema,
} from '../models/createWifiConnection';
import {
  CreateWifiConnectionResponse,
  createWifiConnectionResponseSchema,
} from '../models/createWifiConnectionResponse';
import {
  DeleteWifiConnection,
  deleteWifiConnectionSchema,
} from '../models/deleteWifiConnection';
import {
  EnoceanDimmableLightInstructionsEnum,
  enoceanDimmableLightInstructionsEnumSchema,
} from '../models/enoceanDimmableLightInstructionsEnum';
import {
  HighlightCommand,
  highlightCommandSchema,
} from '../models/highlightCommand';
import { NetworkInfo, networkInfoSchema } from '../models/networkInfo';
import {
  OpenZigbeeNetworkOptions,
  openZigbeeNetworkOptionsSchema,
} from '../models/openZigbeeNetworkOptions';
import {
  PeripheralsPointsRequest,
  peripheralsPointsRequestSchema,
} from '../models/peripheralsPointsRequest';
import {
  PeripheralWithPoints,
  peripheralWithPointsSchema,
} from '../models/peripheralWithPoints';
import {
  ResponseCreateTemplate,
  responseCreateTemplateSchema,
} from '../models/responseCreateTemplate';
import { ScanResponse, scanResponseSchema } from '../models/scanResponse';
import {
  SmartManagerAbout,
  smartManagerAboutSchema,
} from '../models/smartManagerAbout';
import {
  SmartManagerConfig,
  smartManagerConfigSchema,
} from '../models/smartManagerConfig';
import {
  SmartManagerIssue,
  smartManagerIssueSchema,
} from '../models/smartManagerIssue';
import { Template, templateSchema } from '../models/template';
import {
  UpdatePeripheral,
  updatePeripheralSchema,
} from '../models/updatePeripheral';
import { array, number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class DefaultController extends BaseController {
  /**
   * Get the current config for this Smart Manager
   *
   * @return Response from the API call
   */
  async getConfig(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SmartManagerConfig>> {
    const req = this.createRequest('GET', '/config');
    req.authenticate(false);
    return req.callAsJson(smartManagerConfigSchema, requestOptions);
  }

  /**
   * Create or replace an existing config for this Smart Manager
   *
   * @param body
   * @return Response from the API call
   */
  async updateConfig(
    body: SmartManagerConfig,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SmartManagerConfig>> {
    const req = this.createRequest('PUT', '/config');
    const mapped = req.prepareArgs({ body: [body, smartManagerConfigSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(422, ValidateErrorJSONError, 'Validation Failed');
    req.authenticate(false);
    return req.callAsJson(smartManagerConfigSchema, requestOptions);
  }

  /**
   * Get a summary report for this Smart Manager and the environment it's running in
   *
   * @return Response from the API call
   */
  async getManagerAbout(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SmartManagerAbout>> {
    const req = this.createRequest('GET', '/config/about');
    req.authenticate(false);
    return req.callAsJson(smartManagerAboutSchema, requestOptions);
  }

  /**
   * Get the Smart Manager network device name
   *
   * @return Response from the API call
   */
  async getSmartManagerName(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('GET', '/config/device-name');
    req.authenticate(false);
    return req.callAsText(requestOptions);
  }

  /**
   * Get all available room templates for this Smart Manager
   *
   * @return Response from the API call
   */
  async getTemplates(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Template[]>> {
    const req = this.createRequest('GET', '/config/templates');
    req.authenticate(false);
    return req.callAsJson(array(templateSchema), requestOptions);
  }

  /**
   * Route for uploading new templates. This accept any object as input
   * so validation is not done by tsoa (results in ugly error messages)
   * and instead we do our own validation
   *
   * @param body
   * @return Response from the API call
   */
  async uploadTemplates(
    body: unknown[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Template[]>> {
    const req = this.createRequest('POST', '/config/templates');
    const mapped = req.prepareArgs({ body: [body, array(unknown())] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.authenticate(false);
    return req.callAsJson(array(templateSchema), requestOptions);
  }

  /**
   * Deletes a particular device from a template
   *
   * @param templateId
   * @param deviceId
   * @return Response from the API call
   */
  async deleteTemplateDevice(
    templateId: string,
    deviceId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      templateId: [templateId, string()],
      deviceId: [deviceId, string()],
    });
    req.appendTemplatePath`/config/templates/${mapped.templateId}/devices/${mapped.deviceId}`;
    return req.call(requestOptions);
  }

  /**
   * Create a template from scanned peripherals
   *
   * @param body         Array of scanned peripherals
   * @return Response from the API call
   */
  async configTemplateCreate(
    body?: CreateTemplate,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseCreateTemplate>> {
    const req = this.createRequest('POST', '/config/templates/create');
    const mapped = req.prepareArgs({
      body: [body, optional(createTemplateSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(responseCreateTemplateSchema, requestOptions);
  }

  /**
   * Starts a scan for peripherals currently linked to the smart manager.
   *
   * If a dali module is present, the smart manager will check the peripherals table (in the DB) to
   * determine whether dali lights already exist (from being commissioned previously).
   *
   * The smart manager will send a response that let's the front-end know if there is a dali module in
   * the network and any dali lights it currently has saved.
   *
   * The front-end will use the results of this request to determine whether it needs to send a seperate
   * request to rescan for dali lights using the `POST /dali/scan/{multisenseId}` endpoint.
   *
   * If the network has a dali controller but the `scannedPeripheralsArray` returned from this endpoint
   * doesnt contain any peripherals with a className of `DaliLight`, the rescan should be triggered
   *
   *
   *
   *
   * @return Response from the API call
   */
  async getScanPeripherals(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ScanResponse[]>> {
    const req = this.createRequest('GET', '/scan');
    return req.callAsJson(array(scanResponseSchema), requestOptions);
  }

  /**
   * Get log capture status
   *
   * @return Response from the API call
   */
  async getStreamingLogsStatus(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CaptureLogsStatus>> {
    const req = this.createRequest('GET', '/config/logs/capture');
    req.authenticate(false);
    return req.callAsJson(captureLogsStatusSchema, requestOptions);
  }

  /**
   * Starts or stops streaming logs over websocket
   *
   * @param body
   * @return Response from the API call
   */
  async captureLogs(
    body: CaptureLogsBody,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CaptureLogsStatus>> {
    const req = this.createRequest('POST', '/config/logs/capture');
    const mapped = req.prepareArgs({ body: [body, captureLogsBodySchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.authenticate(false);
    return req.callAsJson(captureLogsStatusSchema, requestOptions);
  }

  /**
   * Send EnoceanDimmableLight instructions for testing/commissioning.
   *
   * @param gatewayId
   * @param instruction
   * @return Response from the API call
   */
  async sendDimmableLightInstruction(
    gatewayId: number,
    instruction: EnoceanDimmableLightInstructionsEnum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      gatewayId: [gatewayId, number()],
      instruction: [instruction, enoceanDimmableLightInstructionsEnumSchema],
    });
    req.appendTemplatePath`/enocean/dimmablelight/${mapped.gatewayId}/instructions/${mapped.instruction}`;
    req.authenticate(false);
    return req.call(requestOptions);
  }

  /**
   * Get issues
   *
   * @return Response from the API call
   */
  async getIssues(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SmartManagerIssue[]>> {
    const req = this.createRequest('GET', '/issues');
    req.authenticate(false);
    return req.callAsJson(array(smartManagerIssueSchema), requestOptions);
  }

  /**
   * Get the Smart Manager network info
   *
   * @return Response from the API call
   */
  async getNetworkInfo(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NetworkInfo>> {
    const req = this.createRequest('GET', '/network');
    req.authenticate(false);
    return req.callAsJson(networkInfoSchema, requestOptions);
  }

  /**
   * Get a list of access points (i.e. wifi networks) that are visible to this Smart Manager
   *
   * @return Response from the API call
   */
  async getAccessPoints(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AccessPoint[]>> {
    const req = this.createRequest('GET', '/network/access-points');
    req.authenticate(false);
    return req.callAsJson(array(accessPointSchema), requestOptions);
  }

  /**
   * Add an access point connection, and consequently connect to it
   *
   * If a network is known (i.e. smart-manager has previously connected to it),
   * you can omit `passphrase` even if it's a private network
   *
   * @param body
   * @return Response from the API call
   */
  async createWifiConnection(
    body: CreateWifiConnection,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CreateWifiConnectionResponse>> {
    const req = this.createRequest('POST', '/network/access-points/connection');
    const mapped = req.prepareArgs({
      body: [body, createWifiConnectionSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.authenticate(false);
    return req.callAsJson(createWifiConnectionResponseSchema, requestOptions);
  }

  /**
   * Delete an access point connection, and consequently disconnect from it (if we're currently connected
   * to it)
   *
   * @param body
   * @return Response from the API call
   */
  async deleteWifiConnection(
    body: DeleteWifiConnection,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'DELETE',
      '/network/access-points/connection'
    );
    const mapped = req.prepareArgs({
      body: [body, deleteWifiConnectionSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.authenticate(false);
    return req.call(requestOptions);
  }

  /**
   * Disconnect from currently connected wifi network (if any)
   *
   * @return Response from the API call
   */
  async disconnectWifiConnection(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/network/access-points/disconnect');
    req.authenticate(false);
    return req.call(requestOptions);
  }

  /**
   * Get all peripherals on this smart manager
   *
   * @return Response from the API call
   */
  async getPeripherals(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PeripheralWithPoints[]>> {
    const req = this.createRequest('GET', '/peripherals');
    req.authenticate(false);
    return req.callAsJson(array(peripheralWithPointsSchema), requestOptions);
  }

  /**
   * Create Peripheral
   *
   * @param body
   * @return Response from the API call
   */
  async createPeripheral(
    body: CreatePeripheral,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PeripheralWithPoints>> {
    const req = this.createRequest('POST', '/peripherals');
    const mapped = req.prepareArgs({ body: [body, createPeripheralSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(422, ValidateErrorJSONError, 'Validation Failed');
    req.authenticate(false);
    return req.callAsJson(peripheralWithPointsSchema, requestOptions);
  }

  /**
   * Get Single Peripheral
   *
   * @param id
   * @return Response from the API call
   */
  async getPeripheral(
    id: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PeripheralWithPoints>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, number()] });
    req.appendTemplatePath`/peripherals/${mapped.id}`;
    req.throwOn(404, Peripherals404Error, 'Not Found');
    req.authenticate(false);
    return req.callAsJson(peripheralWithPointsSchema, requestOptions);
  }

  /**
   * Update Peripheral
   *
   * @param id
   * @param body
   * @return Response from the API call
   */
  async updatePeripheral(
    id: number,
    body: UpdatePeripheral,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PeripheralWithPoints>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      id: [id, number()],
      body: [body, updatePeripheralSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/peripherals/${mapped.id}`;
    req.throwOn(404, Peripherals404Error, 'Not Found');
    req.throwOn(422, ValidateErrorJSONError, 'Validation Failed');
    req.authenticate(false);
    return req.callAsJson(peripheralWithPointsSchema, requestOptions);
  }

  /**
   * Delete Peripheral
   *
   * @param id
   * @return Response from the API call
   */
  async deletePeripheral(
    id: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ id: [id, number()] });
    req.appendTemplatePath`/peripherals/${mapped.id}`;
    req.throwOn(404, Peripherals404Error, 'Not Found');
    req.authenticate(false);
    return req.call(requestOptions);
  }

  /**
   * Create point data
   *
   * @param id
   * @param pointName
   * @param body
   * @return Response from the API call
   */
  async setPointValue(
    id: number,
    pointName: string,
    body: PeripheralsPointsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      id: [id, number()],
      pointName: [pointName, string()],
      body: [body, peripheralsPointsRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/peripherals/${mapped.id}/points/${mapped.pointName}`;
    req.authenticate(false);
    return req.call(requestOptions);
  }

  /**
   * Blinks an LED to identify a peripheral
   *
   * @param body
   * @return Response from the API call
   */
  async handleIdentify(
    body: HighlightCommand,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/scan/identify');
    const mapped = req.prepareArgs({ body: [body, highlightCommandSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(422, ValidateErrorJSONError, 'Validation Failed');
    req.authenticate(false);
    return req.call(requestOptions);
  }

  /**
   * Scan for Zigbee peripherals
   *
   * @param body
   * @return Response from the API call
   */
  async openZigbeeNetwork(
    body: OpenZigbeeNetworkOptions,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/zigbee/scan');
    const mapped = req.prepareArgs({
      body: [body, openZigbeeNetworkOptionsSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.authenticate(false);
    return req.call(requestOptions);
  }

  /**
   * Stop the webserver and the access point
   *
   * @return Response from the API call
   */
  async stop(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/stop');
    req.authenticate(false);
    return req.call(requestOptions);
  }

  /**
   * Healthcheck endpoint
   *
   * @return Response from the API call
   */
  async ping(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/ping');
    req.authenticate(false);
    return req.call(requestOptions);
  }

  /**
   * Endpoint for manually triggering the re-addressing of dali lights connecting via a particual
   * multisense
   *
   * Once the smart manager has completed the dali scan, the results will be made available via
   * websockets
   *
   * @param multisenseId id of the multisense that has the dali module
   * @return Response from the API call
   */
  async specificDALIScan(
    multisenseId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({ multisenseId: [multisenseId, string()] });
    req.appendTemplatePath`/dali/scan/${mapped.multisenseId}`;
    req.throwOn(400, DaliScan400Error, 'Bad Request');
    req.throwOn(503, DaliScan503Error, 'Service Unavailable');
    return req.call(requestOptions);
  }
}
