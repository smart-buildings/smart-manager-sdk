/**
 * Smart Manager APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ValidateErrorJSONError } from '../errors/validateErrorJSONError';
import {
  HighlightCommand,
  highlightCommandSchema,
} from '../models/highlightCommand';
import {
  OpenZigbeeNetworkOptions,
  openZigbeeNetworkOptionsSchema,
} from '../models/openZigbeeNetworkOptions';
import { BaseController } from './baseController';

export class ScanController extends BaseController {
  /**
   * Blinks an LED to identify a peripheral
   *
   * @param body
   * @return Response from the API call
   */
  async handleIdentify(
    body: HighlightCommand,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/scan/identify');
    const mapped = req.prepareArgs({ body: [body, highlightCommandSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(422, ValidateErrorJSONError, 'Validation Failed');
    req.authenticate(false);
    return req.call(requestOptions);
  }

  /**
   * Scan for Zigbee peripherals
   *
   * @param body
   * @return Response from the API call
   */
  async openZigbeeNetwork(
    body: OpenZigbeeNetworkOptions,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/zigbee/scan');
    const mapped = req.prepareArgs({
      body: [body, openZigbeeNetworkOptionsSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.authenticate(false);
    return req.call(requestOptions);
  }
}
